(function(e){function n(n){for(var t,c,a=n[0],i=n[1],l=n[2],d=0,p=[];d<a.length;d++)c=a[d],Object.prototype.hasOwnProperty.call(s,c)&&s[c]&&p.push(s[c][0]),s[c]=0;for(t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t]);u&&u(n);while(p.length)p.shift()();return o.push.apply(o,l||[]),r()}function r(){for(var e,n=0;n<o.length;n++){for(var r=o[n],t=!0,a=1;a<r.length;a++){var i=r[a];0!==s[i]&&(t=!1)}t&&(o.splice(n--,1),e=c(c.s=r[0]))}return e}var t={},s={app:0},o=[];function c(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,c),r.l=!0,r.exports}c.m=e,c.c=t,c.d=function(e,n,r){c.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,n){if(1&n&&(e=c(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(c.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)c.d(r,t,function(n){return e[n]}.bind(null,t));return r},c.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(n,"a",n),n},c.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},c.p="/";var a=window["webpackJsonp"]=window["webpackJsonp"]||[],i=a.push.bind(a);a.push=n,a=a.slice();for(var l=0;l<a.length;l++)n(a[l]);var u=i;o.push([0,"chunk-vendors"]),r()})({0:function(e,n,r){e.exports=r("56d7")},"48c3":function(e,n){var r='version: 2\njobs:\n  node:\n    working_directory: ~/demo-react-native\n    docker:\n      - image: circleci/node:8\n    steps:\n      - checkout\n\n      - restore_cache:\n          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}\n\n      - restore_cache:\n          key: node-v1-{{ checksum "package.json" }}-{{ arch }}\n\n      - run: yarn install\n\n      - save_cache:\n          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}\n          paths:\n            - ~/.cache/yarn\n\n      - save_cache:\n          key: node-v1-{{ checksum "package.json" }}-{{ arch }}\n          paths:\n            - node_modules\n\n      - run:\n          name: jest tests\n          command: |\n            mkdir -p test-results/jest\n            yarn run test\n          environment:\n            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml\n\n      - persist_to_workspace:\n          root: ~/demo-react-native\n          paths:\n            - node_modules\n\n      - store_test_results:\n          path: test-results\n\n      - store_artifacts:\n          path: test-results\n\n  android:\n    working_directory: ~/demo-react-native/android\n    docker:\n      - image: circleci/android:api-27-node8-alpha\n    steps:\n      - checkout:\n          path: ~/demo-react-native\n\n      - attach_workspace:\n          at: ~/demo-react-native\n\n      - restore_cache:\n          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}\n\n      - run: bundle install\n\n      - save_cache:\n          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}\n          paths:\n            - vendor/bundle\n\n      - run:\n          name: fastlane tests\n          command: |\n            mkdir -p test-results/fastlane\n            bundle exec fastlane test\n            mv fastlane/report.xml test-results/fastlane\n\n      - store_test_results:\n          path: test-results\n\n      - store_artifacts:\n          path: test-results\n\n  ios:\n    macos:\n      xcode: "9.0"\n    working_directory: ~/demo-react-native\n\n    # use a --login shell so our "set Ruby version" command gets picked up for later steps\n    shell: /bin/bash --login -o pipefail\n\n    steps:\n      - checkout\n\n      - run:\n          name: set Ruby version\n          command:  echo "ruby-2.4" > ~/.ruby-version\n\n      - restore_cache:\n          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}\n\n      - restore_cache:\n          key: node-v1-{{ checksum "package.json" }}-{{ arch }}\n\n      # not using a workspace here as Node and Yarn versions\n      # differ between our macOS executor image and the Docker containers above\n      - run: yarn install\n\n      - save_cache:\n          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}\n          paths:\n            - ~/.cache/yarn\n\n      - save_cache:\n          key: node-v1-{{ checksum "package.json" }}-{{ arch }}\n          paths:\n            - node_modules\n\n      - restore_cache:\n          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}\n\n      - run:\n          command: bundle install\n          working_directory: ios\n\n      - save_cache:\n          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}\n          paths:\n            - vendor/bundle\n\n      - run:\n          command: bundle exec fastlane test\n          working_directory: ios\n\n      - run:\n          name: set up test results\n          working_directory: ios\n          when: always\n          command: |\n            mkdir -p test-results/fastlane test-results/xcode\n            mv fastlane/report.xml test-results/fastlane\n            mv fastlane/test_output/report.junit test-results/xcode/junit.xml\n\n      - store_test_results:\n          path: ios/test-results\n\n      - store_artifacts:\n          path: ios/test-results\n\nworkflows:\n  version: 2\n  node-android-ios:\n    jobs:\n      - node\n      - ios:\n          requires:\n            - node\n      - hold_android:\n          type: approval\n          requires:\n            - node\n      - android:\n          requires:\n            - hold_android\n';oldci='# Modified example from:\n# https://github.com/circleci/frontend\n\n# Try changing "master" branch to something else\n# Deploy step will not execute\n# because "precompile_assets" is only on "master"\n\nversion: 2.0\n\nworkflows:\n  version: 2\n  build_test_deploy:\n    jobs:\n      - checkout_code\n      - clojure_dependencies:\n          requires:\n            - checkout_code\n      - npm_bower_dependencies:\n          requires:\n            - checkout_code\n      - clojure_test:\n          requires:\n            - clojure_dependencies\n            - checkout_code\n      - cljs_test:\n          requires:\n            - clojure_dependencies\n            - npm_bower_dependencies\n            - checkout_code\n            - cljsbuild_test\n      - cljsbuild_test:\n          requires:\n            - clojure_dependencies\n            - checkout_code\n      - cljsbuild_whitespace:\n          requires:\n            - clojure_dependencies\n            - checkout_code\n      - cljsbuild_production:\n          requires:\n            - clojure_dependencies\n            - checkout_code\n      - precompile_assets:\n          requires:\n            - clojure_dependencies\n            - npm_bower_dependencies\n            - cljsbuild_whitespace\n            - cljsbuild_production\n            - checkout_code\n          filters:\n            branches:\n              only: master\n\n      - deploy:\n          requires:\n            - precompile_assets\n            - cljs_test\n            - clojure_test\n            - checkout_code\n\njobs:\n  checkout_code:\n    steps:\n      - checkout\n      - save_cache:\n          key: v1-repo-{{ .Branch }}-{{ .Revision }}\n          paths:\n            - .\n\n  clojure_dependencies:\n    parallelism: 4\n    steps:\n      - run:\n          command: lein deps\n      - save_cache:\n          paths:\n            - /root/.m2\n\n  npm_bower_dependencies:\n    docker:\n      - image: node:4.8.3\n    steps:\n      - run:\n          name: download dependencies\n          command: |\n            if [ ! -d node_modules -o ! -d resources/components ]; then\n              set -exu\n              npm install\n              node_modules/bower/bin/bower --allow-root install\n            fi\n      - save_cache:\n          paths:\n            - /root/frontend/node_modules\n      - save_cache:\n          paths:\n            - /root/frontend/resources/components\n\n  clojure_test:\n    steps:\n      - run:\n          name: lein test\n          command: lein test\n\n  cljs_test:\n    docker:\n      - image: docker:latest\n        environment:\n          IMAGE_TAG: ci-testing-image\n    working_directory: /root/frontend\n    steps:\n      - setup_remote_docker:\n          reusable: true\n      # This is necessary because the docker:latest image doesn\'t have gnu tar\n      - run:\n          name: Install tar\n          command: |\n            set -x\n            apk update\n            apk add tar\n      - run:\n          name: Restore compiled cljs from workspace\n          command: |\n            set -exu\n            mkdir -p resources/public/cljs\n            mv /tmp/workspace/compiled-cljs/test resources/public/cljs/\n      - run:\n          name: run tests\n          command: |\n            set -x\n            docker build -t "$IMAGE_TAG" ci-testing-image\n            CONTAINER_NAME=$(docker create $IMAGE_TAG bash -c \'cd /root/frontend && lein doo chrome-headless test once\')\n            docker cp . "$CONTAINER_NAME:/root/frontend"\n            docker cp /root/.m2/. "$CONTAINER_NAME:/root/.m2"\n            docker start -a $CONTAINER_NAME\n\n  cljsbuild_whitespace:\n    steps:\n      - run:\n          name: cljsbuild whitespace\n          command: lein cljsbuild once whitespace\n      - run:\n          name: Move compiled cljs to workspace\n          command: |\n            set -exu\n            mkdir -p /tmp/workspace/compiled-cljs\n            mv resources/public/cljs/whitespace /tmp/workspace/compiled-cljs/\n      - persist_to_workspace:\n          paths:\n            - compiled-cljs/whitespace\n\n  cljsbuild_production:\n    steps:\n      - run:\n          name: cljsbuild production\n          command: lein cljsbuild once production\n      - run:\n          name: Move compiled cljs to workspace\n          command: |\n            set -exu\n            mkdir -p /tmp/workspace/compiled-cljs\n            mv resources/public/cljs/production /tmp/workspace/compiled-cljs/\n      - persist_to_workspace:\n          paths:\n            - compiled-cljs/production\n\n  cljsbuild_test:\n    parallelism: 2\n    steps:\n      - run:\n          name: cljsbuild test\n          command: lein cljsbuild once test\n      - run:\n          name: Move compiled cljs to workspace\n          command: |\n            set -exu\n            mkdir -p /tmp/workspace/compiled-cljs\n            mv resources/public/cljs/test /tmp/workspace/compiled-cljs/\n      - persist_to_workspace:\n          paths:\n            - compiled-cljs/test\n\n  precompile_assets:\n    steps:\n      - run:\n          name: Restore compiled cljs from workspace\n          command: |\n            set -exu\n            mkdir -p resources/public/cljs\n            mv /tmp/workspace/compiled-cljs/* resources/public/cljs/\n      - run:\n          name: Install node/npm\n          command: |\n            curl -sL https://deb.nodesource.com/setup_4.x | bash -\n            apt-get install -y nodejs\n      - run:\n          name: precompile assets\n          command: |\n            source ~/.bashrc\n            lein run -m frontend.tasks.http/precompile-assets\n      - run:\n          name: Move compiled assets to workspace\n          command: mv resources /tmp/workspace/assets\n\n      - persist_to_workspace:\n          paths:\n            - assets\n\n  deploy:\n    docker:\n      - image: python:2.7\n        environment:\n          BUILD_JSON_PATH: integration-test-build.json\n    working_directory: /root/frontend\n    steps:\n      - run:\n          name: Restore compiled assets from workspace\n          command: |\n            rm -r resources\n            mv /tmp/workspace/assets resources\n      - add-ssh-keys\n      - run:\n          name: Install AWS CLI\n          command: pip install awscli\n      - run:\n          name: Install jq\n          command: |\n            apt-get update && apt-get install jq\n      - run:\n          name: deploy and trigger integration tests\n          command: |\n            set -ex\n            ssh-add -D\n            script/deploy.sh\n            if [[ "${CIRCLE_BRANCH}" == "master" ]]\n            then\n            curl https://api.rollbar.com/api/1/deploy/             --form access_token=$ROLLBAR_ACCESS_TOKEN             --form environment=production             --form revision=$CIRCLE_SHA1             --form local_username=$CIRCLE_USERNAME\n            fi\n      - run:\n          name: Wait for deploy/integration tests to complete\n          command: ./script/wait-for-deploy.sh\n',e.exports=r},"56d7":function(e,n,r){"use strict";r.r(n);r("cadf"),r("551c"),r("f751"),r("097d");var t=r("2b0e"),s=r("8f94"),o=r.n(s),c=(r("ced0"),r("a7be"),r("eb8f"),function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("main",[e._m(0),r("input",{directives:[{name:"model",rawName:"v-model",value:e.branch,expression:"branch"}],staticClass:"branch",attrs:{type:"text"},domProps:{value:e.branch},on:{input:function(n){n.target.composing||(e.branch=n.target.value)}}}),r("codemirror",{model:{value:e.config,callback:function(n){e.config=n},expression:"config"}}),r("div",{directives:[{name:"show",rawName:"v-show",value:e.errorMessage,expression:"errorMessage"}],staticClass:"graph errorMessage"},[r("h2",[e._v("Error")]),e._v("\n    "+e._s(e.errorMessage)+"\n  ")]),r("div",{directives:[{name:"show",rawName:"v-show",value:!e.errorMessage,expression:"!errorMessage"}],staticClass:"graph"},[r("svg",[r("g")])]),e._m(1)],1)}),a=[function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("header",[r("h1",[e._v("CircleCI 2 validator")]),r("p",[e._v("Paste your CircleCI 2 "),r("code",[e._v("config.yml")]),e._v(" to visualise it")])])},function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("footer",[r("a",{attrs:{href:"https://github.com/JackuB/circleci-workflow-validator"}},[e._v("GitHub")]),e._v("\n    ·\n    "),r("a",{attrs:{href:"https://mikul.as"}},[e._v("J")])])}],i=(r("a481"),r("3b2b"),r("6762"),r("2fdb"),r("456d"),r("ac6a"),r("5698")),l=r("1226"),u=r.n(l),d=r("651e"),p=r.n(d),m=r("9b02"),h=r.n(m),f=r("48c3"),_=r.n(f),v={name:"app",data:function(){return{branch:"master",errorMessage:null,config:_.a}},computed:{configjs:function(){try{var e=p.a.safeLoad(this.config);return this.reportError(null),e}catch(n){return this.reportError(n.message)}}},watch:{branch:function(){this.draw()},configjs:function(){try{this.reportError(null),this.draw()}catch(e){this.reportError("Error when drawing graph. Might be something wrong with the config.yml")}}},mounted:function(){this.draw()},methods:{reportError:function(e){return this.errorMessage=e,!e},validate:function(){var e=this.configjs;return e.jobs?e.workflows?this.reportError(null):this.reportError("No workflows found in config.yml"):this.reportError("No jobs found in config.yml")},draw:function(){var e=this;if(!this.errorMessage&&this.validate()){var n=this.configjs,r=i["select"](".graph svg");r.on(".zoom",null),r.selectAll("svg").remove(),r.select("g").attr("transform",null);var t=r.select("g"),s=i["zoom"]().on("zoom",(function(){return t.attr("transform",i["event"].transform)}));r.call(s);var o=new u.a.render,c=new u.a.graphlib.Graph({compound:!0});c.setGraph({nodesep:70,ranksep:50,rankdir:"LR",marginx:20,marginy:20});var a=[];Object.keys(n.workflows).filter((function(e){return"version"!==e})).forEach((function(r){var t=n.workflows[r];c.setNode(r,{label:r,clusterLabelPos:"top",style:"stroke: #ccc; fill: transparent"}),t.jobs.forEach((function(n){var t=n,s={};"string"!==typeof n&&(t=Object.keys(n)[0],s=n[t]);var o="approval"===s.type?{type:"approval"}:e.configjs.jobs[t],i=h()(s,"filters.branches.only");if("string"===typeof i&&(i=[i]),i){var l=i.filter((function(e){return/^\/.*\/$/.test(e)}));if(!i.includes(e.branch)&&!l.filter((function(n){return new RegExp(n.slice(1,-1)).test(e.branch)})).length)return}var u=h()(s,"filters.branches.ignore");if("string"===typeof u&&(u=[u]),!u||!u.includes(e.branch)){var d="".concat(t,"-").concat(r),p="approval"===o.type?"#A692EC":"white",m="approval"===o.type?"||":"".concat(o.parallelism||1,"x");c.setNode(d,{label:"".concat(m," ").concat(t),style:"stroke: #ccc; border-radius: 20px; fill: ".concat(p)}),c.setParent(d,r),(s.requires||[]).forEach((function(e){a.push({requiredJobUuid:"".concat(e,"-").concat(r),uuid:d})}))}}))})),a.forEach((function(e){var n=e.requiredJobUuid,r=e.uuid;c.node(n)&&c.node(r)?c.setEdge(n,r,{width:40}):c.removeNode(r)})),this.$nextTick((function(){t.call(o,c);var e=c.graph().width+80,n=c.graph().height+40,a=parseInt(r.style("width").replace(/px/,""),10),l=parseInt(r.style("height").replace(/px/,""),10),u=Math.min(a/e,l/n),d=a/2-e*u/2,p=l/2-n*u/2,m=r;m.call(s.transform,i["zoomIdentity"].translate(d,p).scale(u))}))}}}},k=v,b=(r("5c0b"),r("2877")),g=Object(b["a"])(k,c,a,!1,null,null,null),w=g.exports;t["a"].config.productionTip=!1,t["a"].use(o.a,{options:{theme:"mdn-like",mode:"text/x-yaml",lineNumbers:!0,line:!0}}),new t["a"]({render:function(e){return e(w)}}).$mount("#app")},"5c0b":function(e,n,r){"use strict";var t=r("e332"),s=r.n(t);s.a},e332:function(e,n,r){}});
//# sourceMappingURL=app.a72122b2.js.map